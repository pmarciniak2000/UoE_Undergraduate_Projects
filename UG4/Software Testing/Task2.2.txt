package st;

import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Test;

public class Task2_2_FunctionalTest {

	private Parser parser;

	/** Setup as required **/
	@Before
	public void setup() {
		parser = new Parser();
	}

	// optionOrShortcutExists test
	@Test
	public void OptionOrShortcutExistsOptionTest() {
		parser.addOption(new Option("option", Type.STRING), "o");
		assert(parser.optionOrShortcutExists("option"));
	}
	
	// optionOrShortcutExists test
	@Test
	public void OptionOrShortcutExistsShortcutTest() {
		parser.addOption(new Option("option", Type.STRING), "o");
		assert(parser.optionOrShortcutExists("o"));
	}
	
	// optionOrShortcutExists test
	@Test
	public void OptionOrShortcutNotExistsShortcutTest() {
		parser.addOption(new Option("option", Type.STRING), "o");
		assert(!parser.optionOrShortcutExists("test"));
	}
	
	// getInteger test
	@Test
	public void getIntegerTypeCharacter() {
		parser.addOption(new Option("option", Type.CHARACTER), "o");
		parser.parse("-o=a");
		assertEquals(parser.getInteger("option"), 'a');
	}

	// getInteger test
	@Test
	public void getIntegerCatchBigIntExcpetion() {
		parser.addOption(new Option("option", Type.INTEGER), "o");
		parser.parse("--option=test");
		assertEquals(parser.getInteger("option"), 0);
	}

	// getInteger test
	@Test
	public void getIntegerBooleanZero() {
		parser.addOption(new Option("option", Type.BOOLEAN), "o");
		parser.parse("--option=0");
		assertEquals(parser.getInteger("option"), 0);
	}

	// parse test
	@Test
	public void parseBooleanFalseStringTest() {
		parser.addOption(new Option("option", Type.BOOLEAN), "o");
		parser.parse("--option=false");
		assertEquals(parser.getString("option"), "");
	}

	// parse test
	@Test
	public void parseBackslashAtStart() {
		parser.addOption(new Option("option", Type.STRING), "o");
		parser.parse("-o=\"test");
		assertEquals(parser.getString("option"), "\"test");
	}

	// parse test
	@Test
	public void parseBackslashAtStartAndEnd() {
		parser.addOption(new Option("option", Type.STRING), "o");
		parser.parse("-o=\"test\"");
		assertEquals(parser.getString("option"), "test");
	}

	// setShortcut test
	@Test
	public void setShortcutTest() {
		parser.addOption(new Option("option", Type.STRING));
		parser.setShortcut("option", "o");
		parser.parse("-o=test");
		assertEquals(parser.getString("o"),"test");
	}
	
	// setShortcut test
	@Test(expected = RuntimeException.class)
	public void setShortcutonNullOptionTest() {
		parser.addOption(new Option("option", Type.STRING));
		parser.setShortcut(null, "o");
		parser.parse("-o=test");
	}
	
	@Test
	public void emptyCommandLine() {
		parser.addOption(new Option("option", Type.STRING),"o");
		assertEquals(parser.parse(""),-2);
	}
	
	@Test
	public void nullCommandLine() {
		parser.addOption(new Option("option", Type.STRING),"o");
		assertEquals(parser.parse(null),-1);
	}
	
	@Test
	public void parserToStringTest() {
		parser.addOption(new Option("option", Type.STRING), "o");
		parser.parse("--option=test");
		assertEquals(parser.toString(), "Options Map: \n" + "{option=Option[name:option, value:test, type:STRING]}\n"
				+ "Shortcuts Map:\n" + "{o=Option[name:option, value:test, type:STRING]}");
	}

	// replace method test
	@Test
	public void optionReplaceTest() {
		parser.addOption(new Option("opt1", Type.STRING), "o1");
		parser.parse("--opt1=OldText");
		parser.replace("--opt1", "Old", "New");
		assertEquals(parser.getString("opt1"), "NewText");
	}
	
	// replace method test
	@Test
	public void shortcutNoDashReplaceTest() {
		parser.addOption(new Option("opt1", Type.STRING), "o1");
		parser.parse("--opt1=OldText");
		parser.replace("o1", "Old", "New");
		assertEquals(parser.getString("opt1"), "NewText");
	}


	@Test(expected = RuntimeException.class)
	public void optionNotDefinedForKey() {
		parser.addOption(new Option("opt1", Type.STRING), "o1");
		parser.getString("--opt2");
	}
	
	@Test(expected = RuntimeException.class)
	public void shortcutNotDefinedForKey() {
		parser.addOption(new Option("opt1", Type.STRING), "o1");
		parser.getString("-o2");
	}
	
	@Test(expected = RuntimeException.class)
	public void shortcutAndOptionNotDefinedForKey() {
		parser.addOption(new Option("opt1", Type.STRING), "o1");
		parser.getString("o2");
	}
	
	@Test(expected = IllegalArgumentException.class)
	public void isOptionValidShortcutNull() {
		parser.addOption(new Option("opt1", Type.STRING), null);
	}
	
	@Test(expected = IllegalArgumentException.class)
	public void isOptionValidNull() {
		parser.addOption(new Option(null, Type.STRING), "o1");
	}
	
	@Test(expected = IllegalArgumentException.class)
	public void isOptionValidEmpty() {
		parser.addOption(new Option("", Type.STRING), "o1");
	}
	
	@Test(expected = IllegalArgumentException.class)
	public void isOptionValidShortcutNotEmptyAndNotMatching() {
		parser.addOption(new Option("steve", Type.STRING), "#");
	}
	
	//equals method test
	@Test
	public void OptionEqualsDiffTypeTest() {
		Option opt1 = new Option("option", Type.INTEGER);
		Option opt2 = new Option("option", Type.STRING);
		assert (!opt1.equals(opt2));
	}
	
	// equals method test
	@Test
	public void OptionEquals() {
		Option opt1 = new Option("opt1", Type.STRING);
		Option opt2 = new Option("opt1", Type.STRING);
		assert (opt1.equals(opt2));
	}

	// equals method test
	@Test
	public void OptionEqualsNull() {
		Option opt1 = new Option("opt1", Type.STRING);
		assert (!opt1.equals(null));
	}
	
	// equals method test
	@Test
	public void OptionEqualsItself() {
		Option opt1 = new Option("opt1", Type.STRING);
		assert (opt1.equals(opt1));
	}

	// equals method test
	@Test(expected = NullPointerException.class)
	public void OptionEqualsBothNamesNull() {
		Option opt1 = new Option(null, Type.STRING);
		Option opt2 = new Option(null, Type.STRING);
		assert (opt1.equals(opt2));
	}

	// equals method test
	@Test
	public void OptionEqualsOtherNameNull() {
		Option opt1 = new Option(null, Type.STRING);
		Option opt2 = new Option("opt", Type.STRING);
		assert (!opt1.equals(opt2));
	}

	// getBoolean test
	@Test
	public void getBooleanIsZero() {
		parser.addOption(new Option("opt1", Type.STRING), "o1");
		parser.parse("--opt1=0");
		assert(!parser.getBoolean("opt1"));
	}
	
	//getBoolean test
	@Test
	public void getBooleanFalse() {
		parser.addOption(new Option("opt1", Type.STRING), "o1");
		parser.parse("--opt1=false");
		assert(!parser.getBoolean("opt1"));
	}
	
	//store method test
	@Test(expected = IllegalArgumentException.class)
	public void storeNoTypeTest() {
		parser.addOption(new Option("opt", Type.NOTYPE), "o");
	}
	
	//store method test
	@Test(expected = RuntimeException.class)
	public void storeEmptyShortcutTest() {
		parser.addOption(new Option("opt1", Type.STRING), "o1");
		parser.addOption(new Option("opt1", Type.STRING), "");
		parser.parse("-=test");
		assertEquals(parser.getString(""),"test");
	}
}
